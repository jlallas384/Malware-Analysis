import base64
import zlib
s = "exec((_)(b''))"
def f(z):
    z = z[11:-3]
    z = z[::-1]
    z = base64.b64decode(z)
    z = zlib.decompress(z)
    #print(z)
    if b"import" in z:
        with open('e.py', 'wb') as ff:
            ff.write(z)
    else:
        f(z)
f(s)